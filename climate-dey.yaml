blueprint:
  name: Ежедневное расписание систем отопления, вентиляции и кондиционирования воздуха
  description: Установите целевую температуру HVAC в зависимости от ее режима.
  domain: automation

  input:
    climate_id:
      name: Термостат
      description: Термостат для управления.
      selector:
        entity:
          domain: climate

    cooling_temp:
      name: Уставка охлаждение 
      description: Целевая температура при охлаждении.
      selector:
        number:
          min: 0
          max: 100

    heating_temp:
      name: Уставка нагрева
      description: Целевая температура при нагреве
      selector:
        number:
          min: 0
          max: 100

    at_time:
      name: Время
      description: Пришло время обновить это устройство.
      selector:
        time:

    retry_timeout:
      name: Тайм-аут повтора
      description: Продолжительность (в минутах) повторной попытки, если устройство не в сети.
      default: 0
      selector:
        number:
          min: 0
          max: 240

    on_monday:
      name: Понедельник
      default: true
      selector:
        boolean:

    on_tuesday:
      name: Вторник
      default: true
      selector:
        boolean:

    on_wednesday:
      name: Среда
      default: true
      selector:
        boolean:

    on_thursday:
      name: Четверг
      default: true
      selector:
        boolean:

    on_friday:
      name: Пятница
      default: true
      selector:
        boolean:

    on_saturday:
      name: Суббота
      default: true
      selector:
        boolean:

    on_sunday:
      name: Воскресенье
      default: true
      selector:
        boolean:

variables:

  # re-declare input as a variable for scripting templates
  retry_timeout: !input 'retry_timeout'

  # array used in the condition for this automation
  weekly_schedule:
    - !input 'on_monday'
    - !input 'on_tuesday'
    - !input 'on_wednesday'
    - !input 'on_thursday'
    - !input 'on_friday'
    - !input 'on_saturday'
    - !input 'on_sunday'

trigger:
  - platform: time
    at: !input 'at_time'

# only run on days we have been requested (using schedule array)
condition: '{{ weekly_schedule[now().weekday()] }}'

action:

  # thermostats require different inputs depending on the current mode

  - choose:

    ## heating mode ##
    - conditions:
        - condition: state
          entity_id: !input 'climate_id'
          state: heat

      sequence:
        - repeat:

            # set the target temperature to the heating_temp input
            sequence:
              - service: climate.set_temperature
                entity_id: !input 'climate_id'
                data:
                  temperature: !input 'heating_temp'
              - delay: '00:01:00'

            # verify that the temperature was set until the retry timeout expires
            until:
              - or:
                - '{{ repeat.index > retry_timeout }}'
                - condition: state
                  entity_id: !input 'climate_id'
                  attribute: temperature
                  state: !input 'heating_temp'

    ## cooling mode ##
    - conditions:
        - condition: state
          entity_id: !input 'climate_id'
          state: cool

      sequence:
        - repeat:

            # set the target temperature to the cooling_temp input
            sequence:
              - service: climate.set_temperature
                entity_id: !input 'climate_id'
                data:
                  temperature: !input 'cooling_temp'
              - delay: '00:01:00'

            # verify that the temperature was set until the retry timeout expires
            until:
              - or:
                - '{{ repeat.index > retry_timeout }}'
                - condition: state
                  entity_id: !input 'climate_id'
                  attribute: temperature
                  state: !input 'cooling_temp'

    ## heat/cool mode ##
    - conditions:
        - condition: state
          entity_id: !input 'climate_id'
          state: heat_cool

      sequence:
        - repeat:

            # set the target temperature range based on user input
            sequence:
              - service: climate.set_temperature
                entity_id: !input 'climate_id'
                data:
                  target_temp_high: !input 'cooling_temp'
                  target_temp_low: !input 'heating_temp'
              - delay: '00:01:00'

            # verify that the temperature was set until the retry timeout expires
            until:
              - or:
                - '{{ repeat.index > retry_timeout }}'
                - and:
                  - condition: state
                    entity_id: !input 'climate_id'
                    attribute: target_temp_high
                    state: !input 'cooling_temp'
                  - condition: state
                    entity_id: !input 'climate_id'
                    attribute: target_temp_low
                    state: !input 'heating_temp'

mode: single
